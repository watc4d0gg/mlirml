open Ctypes
open Types

module Bindings (F : Ctypes.FOREIGN) = struct
	open F

	(* Context *)
	let mlirContextCreate = foreign "mlirContextCreate" (void @-> returning (MlirContext.t))
	let mlirContextCreateWithThreading = foreign "mlirContextCreateWithThreading" (bool @-> returning (MlirContext.t))
	let mlirContextCreateWithRegistry = foreign "mlirContextCreateWithRegistry" (MlirDialectRegistry.t @-> bool @-> returning (MlirContext.t))
	let mlirContextEqual = foreign "mlirContextEqual" (MlirContext.t @-> MlirContext.t @-> returning (bool))
	let mlirContextIsNull = foreign "mlirContextIsNull" (MlirContext.t @-> returning (bool))
	let mlirContextDestroy = foreign "mlirContextDestroy" (MlirContext.t @-> returning (void))
	let mlirContextSetAllowUnregisteredDialects = foreign "mlirContextSetAllowUnregisteredDialects" (MlirContext.t @-> bool @-> returning (void))
	let mlirContextGetAllowUnregisteredDialects = foreign "mlirContextGetAllowUnregisteredDialects" (MlirContext.t @-> returning (bool))
	let mlirContextGetNumRegisteredDialects = foreign "mlirContextGetNumRegisteredDialects" (MlirContext.t @-> returning (intptr_t))
	let mlirContextAppendDialectRegistry = foreign "mlirContextAppendDialectRegistry" (MlirContext.t @-> MlirDialectRegistry.t @-> returning (void))
	let mlirContextGetNumLoadedDialects = foreign "mlirContextGetNumLoadedDialects" (MlirContext.t @-> returning (intptr_t))
	let mlirContextGetOrLoadDialect = foreign "mlirContextGetOrLoadDialect" (MlirContext.t @-> MlirStringRef.t @-> returning (MlirDialect.t))
	let mlirContextEnableMultithreading = foreign "mlirContextEnableMultithreading" (MlirContext.t @-> bool @-> returning (void))
	let mlirContextLoadAllAvailableDialects = foreign "mlirContextLoadAllAvailableDialects" (MlirContext.t @-> returning (void))
	let mlirContextIsRegisteredOperation = foreign "mlirContextIsRegisteredOperation" (MlirContext.t @-> MlirStringRef.t @-> returning (bool))
	let mlirContextSetThreadPool = foreign "mlirContextSetThreadPool" (MlirContext.t @-> MlirLlvmThreadPool.t @-> returning (void))

	(* Dialect *)
	let mlirDialectGetContext = foreign "mlirDialectGetContext" (MlirDialect.t @-> returning (MlirContext.t))
	let mlirDialectIsNull = foreign "mlirDialectIsNull" (MlirDialect.t @-> returning (bool))
	let mlirDialectEqual = foreign "mlirDialectEqual" (MlirDialect.t @-> MlirDialect.t @-> returning (bool))
	let mlirDialectGetNamespace = foreign "mlirDialectGetNamespace" (MlirDialect.t @-> returning (MlirStringRef.t))
	let mlirDialectHandleGetNamespace = foreign "mlirDialectHandleGetNamespace" (MlirDialectHandle.t @-> returning (MlirStringRef.t))
	let mlirDialectHandleInsertDialect = foreign "mlirDialectHandleInsertDialect" (MlirDialectHandle.t @-> MlirDialectRegistry.t @-> returning (void))
	let mlirDialectHandleRegisterDialect = foreign "mlirDialectHandleRegisterDialect" (MlirDialectHandle.t @-> MlirContext.t @-> returning (void))
	let mlirDialectHandleLoadDialect = foreign "mlirDialectHandleLoadDialect" (MlirDialectHandle.t @-> MlirContext.t @-> returning (MlirDialect.t))
	let mlirDialectRegistryCreate = foreign "mlirDialectRegistryCreate" (void @-> returning (MlirDialectRegistry.t))
	let mlirDialectRegistryIsNull = foreign "mlirDialectRegistryIsNull" (MlirDialectRegistry.t @-> returning (bool))
	let mlirDialectRegistryDestroy = foreign "mlirDialectRegistryDestroy" (MlirDialectRegistry.t @-> returning (void))

	(* Location *)
	let mlirLocationGetAttribute = foreign "mlirLocationGetAttribute" (MlirLocation.t @-> returning (MlirAttribute.t))
	let mlirLocationFromAttribute = foreign "mlirLocationFromAttribute" (MlirAttribute.t @-> returning (MlirLocation.t))
	let mlirLocationFileLineColGet = foreign "mlirLocationFileLineColGet" (MlirContext.t @-> MlirStringRef.t @-> size_t @-> size_t @-> returning (MlirLocation.t))
	let mlirLocationCallSiteGet = foreign "mlirLocationCallSiteGet" (MlirLocation.t @-> MlirLocation.t @-> returning (MlirLocation.t))
	let mlirLocationFusedGet = foreign "mlirLocationFusedGet" (MlirContext.t @-> intptr_t @-> ptr (const MlirLocation.t) @-> MlirAttribute.t @-> returning (MlirLocation.t))
	let mlirLocationNameGet = foreign "mlirLocationNameGet" (MlirContext.t @-> MlirStringRef.t @-> MlirLocation.t @-> returning (MlirLocation.t))
	let mlirLocationUnknownGet = foreign "mlirLocationUnknownGet" (MlirContext.t @-> returning (MlirLocation.t))
	let mlirLocationGetContext = foreign "mlirLocationGetContext" (MlirLocation.t @-> returning (MlirContext.t))
	let mlirLocationIsNull = foreign "mlirLocationIsNull" (MlirLocation.t @-> returning (bool))
	let mlirLocationEqual = foreign "mlirLocationEqual" (MlirLocation.t @-> MlirLocation.t @-> returning (bool))
	let mlirLocationPrint = foreign "mlirLocationPrint" (MlirLocation.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))

	(* Module *)
	let mlirModuleCreateEmpty = foreign "mlirModuleCreateEmpty" (MlirLocation.t @-> returning (MlirModule.t))
	let mlirModuleCreateParse = foreign "mlirModuleCreateParse" (MlirContext.t @-> MlirStringRef.t @-> returning (MlirModule.t))
	let mlirModuleGetContext = foreign "mlirModuleGetContext" (MlirModule.t @-> returning (MlirContext.t))
	let mlirModuleGetBody = foreign "mlirModuleGetBody" (MlirModule.t @-> returning (MlirBlock.t))
	let mlirModuleIsNull = foreign "mlirModuleIsNull" (MlirModule.t @-> returning (int))
	let mlirModuleDestroy = foreign "mlirModuleDestroy" (MlirModule.t @-> returning (void))
	let mlirModuleGetOperation = foreign "mlirModuleGetOperation" (MlirModule.t @-> returning (MlirOperation.t))
	let mlirModuleFromOperation = foreign "mlirModuleFromOperation" (MlirOperation.t @-> returning (MlirModule.t))
	let mlirOperationStateGet = foreign "mlirOperationStateGet" (MlirStringRef.t @-> MlirLocation.t @-> returning (MlirOperationState.t))
	let mlirOperationStateAddResults = foreign "mlirOperationStateAddResults" (ptr (MlirOperationState.t) @-> intptr_t @-> ptr (const MlirType.t) @-> returning (void))
	let mlirOperationStateAddOperands = foreign "mlirOperationStateAddOperands" (ptr (MlirOperationState.t) @-> intptr_t @-> ptr (const MlirValue.t) @-> returning (void))
	let mlirOperationStateAddOwnedRegions = foreign "mlirOperationStateAddOwnedRegions" (ptr (MlirOperationState.t) @-> intptr_t @-> ptr (const MlirRegion.t) @-> returning (void))
	let mlirOperationStateAddSuccessors = foreign "mlirOperationStateAddSuccessors" (ptr (MlirOperationState.t) @-> intptr_t @-> ptr (const MlirBlock.t) @-> returning (void))
	let mlirOperationStateAddAttributes = foreign "mlirOperationStateAddAttributes" (ptr (MlirOperationState.t) @-> intptr_t @-> ptr (const MlirNamedAttribute.t) @-> returning (void))
	let mlirOperationStateEnableResultTypeInference = foreign "mlirOperationStateEnableResultTypeInference" (ptr (MlirOperationState.t) @-> returning (void))

	(* AsmState *)
	let mlirAsmStateCreateForOperation = foreign "mlirAsmStateCreateForOperation" (MlirOperation.t @-> MlirOpPrintingFlags.t @-> returning (MlirAsmState.t))
	let mlirAsmStateCreateForValue = foreign "mlirAsmStateCreateForValue" (MlirValue.t @-> MlirOpPrintingFlags.t @-> returning (MlirAsmState.t))
	let mlirAsmStateDestroy = foreign "mlirAsmStateDestroy" (MlirAsmState.t @-> returning (void))

	(* OpPrintingFlags *)
	let mlirOpPrintingFlagsCreate = foreign "mlirOpPrintingFlagsCreate" (void @-> returning (MlirOpPrintingFlags.t))
	let mlirOpPrintingFlagsDestroy = foreign "mlirOpPrintingFlagsDestroy" (MlirOpPrintingFlags.t @-> returning (void))
	let mlirOpPrintingFlagsElideLargeElementsAttrs = foreign "mlirOpPrintingFlagsElideLargeElementsAttrs" (MlirOpPrintingFlags.t @-> intptr_t @-> returning (void))
	let mlirOpPrintingFlagsElideLargeResourceString = foreign "mlirOpPrintingFlagsElideLargeResourceString" (MlirOpPrintingFlags.t @-> intptr_t @-> returning (void))
	let mlirOpPrintingFlagsEnableDebugInfo = foreign "mlirOpPrintingFlagsEnableDebugInfo" (MlirOpPrintingFlags.t @-> int @-> int @-> returning (void))
	let mlirOpPrintingFlagsPrintGenericOpForm = foreign "mlirOpPrintingFlagsPrintGenericOpForm" (MlirOpPrintingFlags.t @-> returning (void))
	let mlirOpPrintingFlagsUseLocalScope = foreign "mlirOpPrintingFlagsUseLocalScope" (MlirOpPrintingFlags.t @-> returning (void))
	let mlirOpPrintingFlagsAssumeVerified = foreign "mlirOpPrintingFlagsAssumeVerified" (MlirOpPrintingFlags.t @-> returning (void))
	let mlirOpPrintingFlagsSkipRegions = foreign "mlirOpPrintingFlagsSkipRegions" (MlirOpPrintingFlags.t @-> returning (void))

	(* BytecodeWriterConfig *)
	let mlirBytecodeWriterConfigCreate = foreign "mlirBytecodeWriterConfigCreate" (void @-> returning (MlirBytecodeWriterConfig.t))
	let mlirBytecodeWriterConfigDestroy = foreign "mlirBytecodeWriterConfigDestroy" (MlirBytecodeWriterConfig.t @-> returning (void))
	let mlirBytecodeWriterConfigDesiredEmitVersion = foreign "mlirBytecodeWriterConfigDesiredEmitVersion" (MlirBytecodeWriterConfig.t @-> int64_t @-> returning (void))

	(* Operation *)
	let mlirOperationCreate = foreign "mlirOperationCreate" (ptr (MlirOperationState.t) @-> returning (MlirOperation.t))
	let mlirOperationCreateParse = foreign "mlirOperationCreateParse" (MlirContext.t @-> MlirStringRef.t @-> MlirStringRef.t @-> returning (MlirOperation.t))
	let mlirOperationClone = foreign "mlirOperationClone" (MlirOperation.t @-> returning (MlirOperation.t))
	let mlirOperationDestroy = foreign "mlirOperationDestroy" (MlirOperation.t @-> returning (void))
	let mlirOperationRemoveFromParent = foreign "mlirOperationRemoveFromParent" (MlirOperation.t @-> returning (void))
	let mlirOperationIsNull = foreign "mlirOperationIsNull" (MlirOperation.t @-> returning (int))
	let mlirOperationEqual = foreign "mlirOperationEqual" (MlirOperation.t @-> MlirOperation.t @-> returning (int))
	let mlirOperationGetContext = foreign "mlirOperationGetContext" (MlirOperation.t @-> returning (MlirContext.t))
	let mlirOperationGetLocation = foreign "mlirOperationGetLocation" (MlirOperation.t @-> returning (MlirLocation.t))
	let mlirOperationGetTypeID = foreign "mlirOperationGetTypeID" (MlirOperation.t @-> returning (MlirTypeID.t))
	let mlirOperationGetName = foreign "mlirOperationGetName" (MlirOperation.t @-> returning (MlirIdentifier.t))
	let mlirOperationGetBlock = foreign "mlirOperationGetBlock" (MlirOperation.t @-> returning (MlirBlock.t))
	let mlirOperationGetParentOperation = foreign "mlirOperationGetParentOperation" (MlirOperation.t @-> returning (MlirOperation.t))
	let mlirOperationGetNumRegions = foreign "mlirOperationGetNumRegions" (MlirOperation.t @-> returning (intptr_t))
	let mlirOperationGetRegion = foreign "mlirOperationGetRegion" (MlirOperation.t @-> intptr_t @-> returning (MlirRegion.t))
	let mlirOperationGetNextInBlock = foreign "mlirOperationGetNextInBlock" (MlirOperation.t @-> returning (MlirOperation.t))
	let mlirOperationGetNumOperands = foreign "mlirOperationGetNumOperands" (MlirOperation.t @-> returning (intptr_t))
	let mlirOperationGetOperand = foreign "mlirOperationGetOperand" (MlirOperation.t @-> intptr_t @-> returning (MlirValue.t))
	let mlirOperationSetOperand = foreign "mlirOperationSetOperand" (MlirOperation.t @-> intptr_t @-> MlirValue.t @-> returning (void))
	let mlirOperationSetOperands = foreign "mlirOperationSetOperands" (MlirOperation.t @-> intptr_t @-> ptr (const MlirValue.t) @-> returning (void))
	let mlirOperationGetNumResults = foreign "mlirOperationGetNumResults" (MlirOperation.t @-> returning (intptr_t))
	let mlirOperationGetResult = foreign "mlirOperationGetResult" (MlirOperation.t @-> intptr_t @-> returning (MlirValue.t))
	let mlirOperationGetNumSuccessors = foreign "mlirOperationGetNumSuccessors" (MlirOperation.t @-> returning (intptr_t))
	let mlirOperationGetSuccessor = foreign "mlirOperationGetSuccessor" (MlirOperation.t @-> intptr_t @-> returning (MlirBlock.t))
	let mlirOperationSetSuccessor = foreign "mlirOperationSetSuccessor" (MlirOperation.t @-> intptr_t @-> MlirBlock.t @-> returning (void))
	let mlirOperationHasInherentAttributeByName = foreign "mlirOperationHasInherentAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> returning (int))
	let mlirOperationGetInherentAttributeByName = foreign "mlirOperationGetInherentAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> returning (MlirAttribute.t))
	let mlirOperationSetInherentAttributeByName = foreign "mlirOperationSetInherentAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> MlirAttribute.t @-> returning (void))
	let mlirOperationGetNumDiscardableAttributes = foreign "mlirOperationGetNumDiscardableAttributes" (MlirOperation.t @-> returning (intptr_t))
	let mlirOperationGetDiscardableAttribute = foreign "mlirOperationGetDiscardableAttribute" (MlirOperation.t @-> intptr_t @-> returning (MlirNamedAttribute.t))
	let mlirOperationGetDiscardableAttributeByName = foreign "mlirOperationGetDiscardableAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> returning (MlirAttribute.t))
	let mlirOperationSetDiscardableAttributeByName = foreign "mlirOperationSetDiscardableAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> MlirAttribute.t @-> returning (void))
	let mlirOperationRemoveDiscardableAttributeByName = foreign "mlirOperationRemoveDiscardableAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> returning (int))
	let mlirOperationGetNumAttributes = foreign "mlirOperationGetNumAttributes" (MlirOperation.t @-> returning (intptr_t))
	let mlirOperationGetAttribute = foreign "mlirOperationGetAttribute" (MlirOperation.t @-> intptr_t @-> returning (MlirNamedAttribute.t))
	let mlirOperationGetAttributeByName = foreign "mlirOperationGetAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> returning (MlirAttribute.t))
	let mlirOperationSetAttributeByName = foreign "mlirOperationSetAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> MlirAttribute.t @-> returning (void))
	let mlirOperationRemoveAttributeByName = foreign "mlirOperationRemoveAttributeByName" (MlirOperation.t @-> MlirStringRef.t @-> returning (int))
	let mlirOperationPrint = foreign "mlirOperationPrint" (MlirOperation.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))
	let mlirOperationPrintWithFlags = foreign "mlirOperationPrintWithFlags" (MlirOperation.t @-> MlirOpPrintingFlags.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))
	let mlirOperationPrintWithState = foreign "mlirOperationPrintWithState" (MlirOperation.t @-> MlirAsmState.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))
	let mlirOperationWriteBytecode = foreign "mlirOperationWriteBytecode" (MlirOperation.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))
	let mlirOperationWriteBytecodeWithConfig = foreign "mlirOperationWriteBytecodeWithConfig" (MlirOperation.t @-> MlirBytecodeWriterConfig.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (MlirLogicalResult.t))
	let mlirOperationDump = foreign "mlirOperationDump" (MlirOperation.t @-> returning (void))
	let mlirOperationVerify = foreign "mlirOperationVerify" (MlirOperation.t @-> returning (int))
	let mlirOperationMoveAfter = foreign "mlirOperationMoveAfter" (MlirOperation.t @-> MlirOperation.t @-> returning (void))
	let mlirOperationMoveBefore = foreign "mlirOperationMoveBefore" (MlirOperation.t @-> MlirOperation.t @-> returning (void))
	let mlirOperationWalk = foreign "mlirOperationWalk" (MlirOperation.t @-> MlirOperationWalkCallback.t @-> ptr (void) @-> walkorder @-> returning (void))

	(* Region *)
	let mlirRegionCreate = foreign "mlirRegionCreate" (void @-> returning (MlirRegion.t))
	let mlirRegionDestroy = foreign "mlirRegionDestroy" (MlirRegion.t @-> returning (void))
	let mlirRegionIsNull = foreign "mlirRegionIsNull" (MlirRegion.t @-> returning (bool))
	let mlirRegionEqual = foreign "mlirRegionEqual" (MlirRegion.t @-> MlirRegion.t @-> returning (int))
	let mlirRegionGetFirstBlock = foreign "mlirRegionGetFirstBlock" (MlirRegion.t @-> returning (MlirBlock.t))
	let mlirRegionAppendOwnedBlock = foreign "mlirRegionAppendOwnedBlock" (MlirRegion.t @-> MlirBlock.t @-> returning (void))
	let mlirRegionInsertOwnedBlock = foreign "mlirRegionInsertOwnedBlock" (MlirRegion.t @-> intptr_t @-> MlirBlock.t @-> returning (void))
	let mlirRegionInsertOwnedBlockAfter = foreign "mlirRegionInsertOwnedBlockAfter" (MlirRegion.t @-> MlirBlock.t @-> MlirBlock.t @-> returning (void))
	let mlirRegionInsertOwnedBlockBefore = foreign "mlirRegionInsertOwnedBlockBefore" (MlirRegion.t @-> MlirBlock.t @-> MlirBlock.t @-> returning (void))
	let mlirOperationGetFirstRegion = foreign "mlirOperationGetFirstRegion" (MlirOperation.t @-> returning (MlirRegion.t))
	let mlirRegionGetNextInOperation = foreign "mlirRegionGetNextInOperation" (MlirRegion.t @-> returning (MlirRegion.t))
	let mlirRegionTakeBody = foreign "mlirRegionTakeBody" (MlirRegion.t @-> MlirRegion.t @-> returning (void))

	(* Block *)
	let mlirBlockCreate = foreign "mlirBlockCreate" (intptr_t @-> ptr (const MlirType.t) @-> ptr (const MlirLocation.t) @-> returning (MlirBlock.t))
	let mlirBlockDestroy = foreign "mlirBlockDestroy" (MlirBlock.t @-> returning (void))
	let mlirBlockDetach = foreign "mlirBlockDetach" (MlirBlock.t @-> returning (void))
	let mlirBlockIsNull = foreign "mlirBlockIsNull" (MlirBlock.t @-> returning (bool))
	let mlirBlockEqual = foreign "mlirBlockEqual" (MlirBlock.t @-> MlirBlock.t @-> returning (bool))
	let mlirBlockGetParentOperation = foreign "mlirBlockGetParentOperation" (MlirBlock.t @-> returning (MlirOperation.t))
	let mlirBlockGetParentRegion = foreign "mlirBlockGetParentRegion" (MlirBlock.t @-> returning (MlirRegion.t))
	let mlirBlockGetNextInRegion = foreign "mlirBlockGetNextInRegion" (MlirBlock.t @-> returning (MlirBlock.t))
	let mlirBlockGetFirstOperation = foreign "mlirBlockGetFirstOperation" (MlirBlock.t @-> returning (MlirOperation.t))
	let mlirBlockGetTerminator = foreign "mlirBlockGetTerminator" (MlirBlock.t @-> returning (MlirOperation.t))
	let mlirBlockAppendOwnedOperation = foreign "mlirBlockAppendOwnedOperation" (MlirBlock.t @-> MlirOperation.t @-> returning (void))
	let mlirBlockInsertOwnedOperation = foreign "mlirBlockInsertOwnedOperation" (MlirBlock.t @-> intptr_t @-> MlirOperation.t @-> returning (void))
	let mlirBlockInsertOwnedOperationAfter = foreign "mlirBlockInsertOwnedOperationAfter" (MlirBlock.t @-> MlirOperation.t @-> MlirOperation.t @-> returning (void))
	let mlirBlockInsertOwnedOperationBefore = foreign "mlirBlockInsertOwnedOperationBefore" (MlirBlock.t @-> MlirOperation.t @-> MlirOperation.t @-> returning (void))
	let mlirBlockGetNumArguments = foreign "mlirBlockGetNumArguments" (MlirBlock.t @-> returning (intptr_t))
	let mlirBlockAddArgument = foreign "mlirBlockAddArgument" (MlirBlock.t @-> MlirType.t @-> MlirLocation.t @-> returning (MlirValue.t))
	let mlirBlockEraseArgument = foreign "mlirBlockEraseArgument" (MlirBlock.t @-> size_t @-> returning (void))
	let mlirBlockInsertArgument = foreign "mlirBlockInsertArgument" (MlirBlock.t @-> intptr_t @-> MlirType.t @-> MlirLocation.t @-> returning (MlirValue.t))
	let mlirBlockGetArgument = foreign "mlirBlockGetArgument" (MlirBlock.t @-> intptr_t @-> returning (MlirValue.t))
	let mlirBlockPrint = foreign "mlirBlockPrint" (MlirBlock.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))

	(* Value *)
	let mlirValueIsNull = foreign "mlirValueIsNull" (MlirValue.t @-> returning (bool))
	let mlirValueEqual = foreign "mlirValueEqual" (MlirValue.t @-> MlirValue.t @-> returning (bool))
	let mlirValueIsABlockArgument = foreign "mlirValueIsABlockArgument" (MlirValue.t @-> returning (bool))
	let mlirValueIsAOpResult = foreign "mlirValueIsAOpResult" (MlirValue.t @-> returning (bool))
	let mlirBlockArgumentGetOwner = foreign "mlirBlockArgumentGetOwner" (MlirValue.t @-> returning (MlirBlock.t))
	let mlirBlockArgumentGetArgNumber = foreign "mlirBlockArgumentGetArgNumber" (MlirValue.t @-> returning (intptr_t))
	let mlirBlockArgumentSetType = foreign "mlirBlockArgumentSetType" (MlirValue.t @-> MlirType.t @-> returning (void))
	let mlirOpResultGetOwner = foreign "mlirOpResultGetOwner" (MlirValue.t @-> returning (MlirOperation.t))
	let mlirOpResultGetResultNumber = foreign "mlirOpResultGetResultNumber" (MlirValue.t @-> returning (intptr_t))
	let mlirValueGetType = foreign "mlirValueGetType" (MlirValue.t @-> returning (MlirType.t))
	let mlirValueSetType = foreign "mlirValueSetType" (MlirValue.t @-> MlirType.t @-> returning (void))
	let mlirValueDump = foreign "mlirValueDump" (MlirValue.t @-> returning (void))
	let mlirValuePrint = foreign "mlirValuePrint" (MlirValue.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))
	let mlirValuePrintAsOperand = foreign "mlirValuePrintAsOperand" (MlirValue.t @-> MlirAsmState.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))
	let mlirValueGetFirstUse = foreign "mlirValueGetFirstUse" (MlirValue.t @-> returning (MlirOpOperand.t))
	let mlirValueReplaceAllUsesOfWith = foreign "mlirValueReplaceAllUsesOfWith" (MlirValue.t @-> MlirValue.t @-> returning (void))

	(* OpOperand *)
	let mlirOpOperandIsNull = foreign "mlirOpOperandIsNull" (MlirOpOperand.t @-> returning (bool))
	let mlirOpOperandGetValue = foreign "mlirOpOperandGetValue" (MlirOpOperand.t @-> returning (MlirValue.t))
	let mlirOpOperandGetOwner = foreign "mlirOpOperandGetOwner" (MlirOpOperand.t @-> returning (MlirOperation.t))
	let mlirOpOperandGetOperandNumber = foreign "mlirOpOperandGetOperandNumber" (MlirOpOperand.t @-> returning (size_t))
	let mlirOpOperandGetNextUse = foreign "mlirOpOperandGetNextUse" (MlirOpOperand.t @-> returning (MlirOpOperand.t))

	(* Type *)
	let mlirTypeParseGet = foreign "mlirTypeParseGet" (MlirContext.t @-> MlirStringRef.t @-> returning (MlirType.t))
	let mlirTypeGetContext = foreign "mlirTypeGetContext" (MlirType.t @-> returning (MlirContext.t))
	let mlirTypeGetTypeID = foreign "mlirTypeGetTypeID" (MlirType.t @-> returning (MlirTypeID.t))
	let mlirTypeGetDialect = foreign "mlirTypeGetDialect" (MlirType.t @-> returning (MlirDialect.t))
	let mlirTypeIsNull = foreign "mlirTypeIsNull" (MlirType.t @-> returning (bool))
	let mlirTypeEqual = foreign "mlirTypeEqual" (MlirType.t @-> MlirType.t @-> returning (bool))
	let mlirTypePrint = foreign "mlirTypePrint" (MlirType.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))
	let mlirTypeDump = foreign "mlirTypeDump" (MlirType.t @-> returning (void))

	(* Attribute *)
	let mlirAttributeParseGet = foreign "mlirAttributeParseGet" (MlirContext.t @-> MlirStringRef.t @-> returning (MlirAttribute.t))
	let mlirAttributeGetContext = foreign "mlirAttributeGetContext" (MlirAttribute.t @-> returning (MlirContext.t))
	let mlirAttributeGetType = foreign "mlirAttributeGetType" (MlirAttribute.t @-> returning (MlirType.t))
	let mlirAttributeGetTypeID = foreign "mlirAttributeGetTypeID" (MlirAttribute.t @-> returning (MlirTypeID.t))
	let mlirAttributeGetDialect = foreign "mlirAttributeGetDialect" (MlirAttribute.t @-> returning (MlirDialect.t))
	let mlirAttributeIsNull = foreign "mlirAttributeIsNull" (MlirAttribute.t @-> returning (bool))
	let mlirAttributeEqual = foreign "mlirAttributeEqual" (MlirAttribute.t @-> MlirAttribute.t @-> returning (bool))
	let mlirAttributePrint = foreign "mlirAttributePrint" (MlirAttribute.t @-> MlirStringCallback.t @-> ptr (void) @-> returning (void))
	let mlirAttributeDump = foreign "mlirAttributeDump" (MlirAttribute.t @-> returning (void))

	(* NamedAttribute *)
	let mlirNamedAttributeGet = foreign "mlirNamedAttributeGet" (MlirIdentifier.t @-> MlirAttribute.t @-> returning (MlirNamedAttribute.t))

	(* Identifier *)
	let mlirIdentifierGet = foreign "mlirIdentifierGet" (MlirContext.t @-> MlirStringRef.t @-> returning (MlirIdentifier.t))
	let mlirIdentifierGetContext = foreign "mlirIdentifierGetContext" (MlirIdentifier.t @-> returning (MlirContext.t))
	let mlirIdentifierEqual = foreign "mlirIdentifierEqual" (MlirIdentifier.t @-> MlirIdentifier.t @-> returning (bool))
	let mlirIdentifierStr = foreign "mlirIdentifierStr" (MlirIdentifier.t @-> returning (MlirStringRef.t))

	(* SymbolTable *)
	let mlirSymbolTableGetSymbolAttributeName = foreign "mlirSymbolTableGetSymbolAttributeName" (void @-> returning (MlirStringRef.t))
	let mlirSymbolTableGetVisibilityAttributeName = foreign "mlirSymbolTableGetVisibilityAttributeName" (void @-> returning (MlirStringRef.t))
	let mlirSymbolTableCreate = foreign "mlirSymbolTableCreate" (MlirOperation.t @-> returning (MlirSymbolTable.t))
	let mlirSymbolTableIsNull = foreign "mlirSymbolTableIsNull" (MlirSymbolTable.t @-> returning (bool))
	let mlirSymbolTableDestroy = foreign "mlirSymbolTableDestroy" (MlirSymbolTable.t @-> returning (void))
	let mlirSymbolTableLookup = foreign "mlirSymbolTableLookup" (MlirSymbolTable.t @-> MlirStringRef.t @-> returning (MlirOperation.t))
	let mlirSymbolTableInsert = foreign "mlirSymbolTableInsert" (MlirSymbolTable.t @-> MlirOperation.t @-> returning (MlirAttribute.t))
	let mlirSymbolTableErase = foreign "mlirSymbolTableErase" (MlirSymbolTable.t @-> MlirOperation.t @-> returning (void))
	let mlirSymbolTableReplaceAllSymbolUses = foreign "mlirSymbolTableReplaceAllSymbolUses" (MlirStringRef.t @-> MlirStringRef.t @-> MlirOperation.t @-> returning (MlirLogicalResult.t))
	let mlirSymbolTableWalkSymbolTables = foreign "mlirSymbolTableWalkSymbolTables" (MlirOperation.t @-> int @-> MlirCallback.t @-> (ptr (void)) @-> returning (void))

end